// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: query.sql

package storage

import (
	"context"
)

const createSeason = `-- name: CreateSeason :one
INSERT INTO seasons (
    id, 
    name
) VALUES (
    ?, ?
)
RETURNING id, name
`

type CreateSeasonParams struct {
	ID   int64
	Name string
}

func (q *Queries) CreateSeason(ctx context.Context, arg CreateSeasonParams) (Season, error) {
	row := q.db.QueryRowContext(ctx, createSeason, arg.ID, arg.Name)
	var i Season
	err := row.Scan(&i.ID, &i.Name)
	return i, err
}

const createToken = `-- name: CreateToken :one
INSERT INTO tokens (
    id,
    value
) VALUES (
    ?, ?
)
RETURNING id, value
`

type CreateTokenParams struct {
	ID    string
	Value string
}

func (q *Queries) CreateToken(ctx context.Context, arg CreateTokenParams) (Token, error) {
	row := q.db.QueryRowContext(ctx, createToken, arg.ID, arg.Value)
	var i Token
	err := row.Scan(&i.ID, &i.Value)
	return i, err
}

const deleteSeason = `-- name: DeleteSeason :exec
DELETE FROM seasons
WHERE id = ?
`

func (q *Queries) DeleteSeason(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteSeason, id)
	return err
}

const deleteToken = `-- name: DeleteToken :exec
DELETE FROM tokens
WHERE id = ?
`

func (q *Queries) DeleteToken(ctx context.Context, id string) error {
	_, err := q.db.ExecContext(ctx, deleteToken, id)
	return err
}

const getSeason = `-- name: GetSeason :one
SELECT id, name FROM seasons
WHERE id = ? LIMIT 1
`

func (q *Queries) GetSeason(ctx context.Context, id int64) (Season, error) {
	row := q.db.QueryRowContext(ctx, getSeason, id)
	var i Season
	err := row.Scan(&i.ID, &i.Name)
	return i, err
}

const getToken = `-- name: GetToken :one
SELECT id, value FROM tokens
WHERE id = ? LIMIT 1
`

func (q *Queries) GetToken(ctx context.Context, id string) (Token, error) {
	row := q.db.QueryRowContext(ctx, getToken, id)
	var i Token
	err := row.Scan(&i.ID, &i.Value)
	return i, err
}

const listSeasons = `-- name: ListSeasons :many
SELECT id, name FROM seasons
ORDER BY name
`

func (q *Queries) ListSeasons(ctx context.Context) ([]Season, error) {
	rows, err := q.db.QueryContext(ctx, listSeasons)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Season
	for rows.Next() {
		var i Season
		if err := rows.Scan(&i.ID, &i.Name); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listTokens = `-- name: ListTokens :many
SELECT id, value FROM tokens
ORDER BY id
`

func (q *Queries) ListTokens(ctx context.Context) ([]Token, error) {
	rows, err := q.db.QueryContext(ctx, listTokens)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Token
	for rows.Next() {
		var i Token
		if err := rows.Scan(&i.ID, &i.Value); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateToken = `-- name: UpdateToken :exec
UPDATE tokens
set value = ?
WHERE id = ?
`

type UpdateTokenParams struct {
	Value string
	ID    string
}

func (q *Queries) UpdateToken(ctx context.Context, arg UpdateTokenParams) error {
	_, err := q.db.ExecContext(ctx, updateToken, arg.Value, arg.ID)
	return err
}
