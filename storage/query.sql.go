// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: query.sql

package storage

import (
	"context"
	"database/sql"
)

const addEpisodeToPlaylist = `-- name: AddEpisodeToPlaylist :exec
INSERT OR IGNORE INTO playlist_episodes (playlist_id, episode_id)
VALUES (?, ?)
`

type AddEpisodeToPlaylistParams struct {
	PlaylistID sql.NullInt64
	EpisodeID  sql.NullInt64
}

func (q *Queries) AddEpisodeToPlaylist(ctx context.Context, arg AddEpisodeToPlaylistParams) error {
	_, err := q.db.ExecContext(ctx, addEpisodeToPlaylist, arg.PlaylistID, arg.EpisodeID)
	return err
}

const createDownload = `-- name: CreateDownload :one
INSERT INTO downloads (
    episode_id,
    file_path,
    downloaded_at
) VALUES (
    ?, ?, ?
)
RETURNING episode_id, file_path, downloaded_at
`

type CreateDownloadParams struct {
	EpisodeID    sql.NullInt64
	FilePath     sql.NullString
	DownloadedAt sql.NullInt64
}

func (q *Queries) CreateDownload(ctx context.Context, arg CreateDownloadParams) (Download, error) {
	row := q.db.QueryRowContext(ctx, createDownload, arg.EpisodeID, arg.FilePath, arg.DownloadedAt)
	var i Download
	err := row.Scan(&i.EpisodeID, &i.FilePath, &i.DownloadedAt)
	return i, err
}

const createEpisode = `-- name: CreateEpisode :one
INSERT INTO episodes (
    id,
    title,
    description,
    cover_url,
    thumbnail_url,
    poster_url,
    duration,
    external_asset_id,
    rating,
    descriptors,
    season_number,
    episode_number,
    season_id
) VALUES (
    ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?
)
RETURNING id, title, description, cover_url, thumbnail_url, poster_url, duration, external_asset_id, rating, descriptors, season_number, episode_number, season_id
`

type CreateEpisodeParams struct {
	ID              int64
	Title           string
	Description     sql.NullString
	CoverUrl        sql.NullString
	ThumbnailUrl    sql.NullString
	PosterUrl       sql.NullString
	Duration        sql.NullInt64
	ExternalAssetID sql.NullString
	Rating          sql.NullString
	Descriptors     sql.NullString
	SeasonNumber    sql.NullInt64
	EpisodeNumber   sql.NullInt64
	SeasonID        sql.NullInt64
}

func (q *Queries) CreateEpisode(ctx context.Context, arg CreateEpisodeParams) (Episode, error) {
	row := q.db.QueryRowContext(ctx, createEpisode,
		arg.ID,
		arg.Title,
		arg.Description,
		arg.CoverUrl,
		arg.ThumbnailUrl,
		arg.PosterUrl,
		arg.Duration,
		arg.ExternalAssetID,
		arg.Rating,
		arg.Descriptors,
		arg.SeasonNumber,
		arg.EpisodeNumber,
		arg.SeasonID,
	)
	var i Episode
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Description,
		&i.CoverUrl,
		&i.ThumbnailUrl,
		&i.PosterUrl,
		&i.Duration,
		&i.ExternalAssetID,
		&i.Rating,
		&i.Descriptors,
		&i.SeasonNumber,
		&i.EpisodeNumber,
		&i.SeasonID,
	)
	return i, err
}

const createPlaylist = `-- name: CreatePlaylist :one
INSERT INTO playlists (
    id, 
    title,
    description,
    small_cover_url,
    cover_url,
    playlist_type
) VALUES (
    ?, ?, ?, ?, ?, ?
)
RETURNING id, title, description, small_cover_url, cover_url, playlist_type
`

type CreatePlaylistParams struct {
	ID            int64
	Title         string
	Description   sql.NullString
	SmallCoverUrl sql.NullString
	CoverUrl      sql.NullString
	PlaylistType  sql.NullString
}

func (q *Queries) CreatePlaylist(ctx context.Context, arg CreatePlaylistParams) (Playlist, error) {
	row := q.db.QueryRowContext(ctx, createPlaylist,
		arg.ID,
		arg.Title,
		arg.Description,
		arg.SmallCoverUrl,
		arg.CoverUrl,
		arg.PlaylistType,
	)
	var i Playlist
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Description,
		&i.SmallCoverUrl,
		&i.CoverUrl,
		&i.PlaylistType,
	)
	return i, err
}

const createSeason = `-- name: CreateSeason :one
INSERT INTO seasons (
    id, 
    title,
    description,
    long_description,
    small_cover_url,
    cover_url,
    title_url,
    poster_url,
    season_number,
    episode_count,
    series_id
) VALUES (
    ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?
)
RETURNING id, title, description, long_description, small_cover_url, cover_url, title_url, poster_url, season_number, episode_count, series_id
`

type CreateSeasonParams struct {
	ID              int64
	Title           string
	Description     sql.NullString
	LongDescription sql.NullString
	SmallCoverUrl   sql.NullString
	CoverUrl        sql.NullString
	TitleUrl        sql.NullString
	PosterUrl       sql.NullString
	SeasonNumber    sql.NullInt64
	EpisodeCount    sql.NullInt64
	SeriesID        sql.NullInt64
}

func (q *Queries) CreateSeason(ctx context.Context, arg CreateSeasonParams) (Season, error) {
	row := q.db.QueryRowContext(ctx, createSeason,
		arg.ID,
		arg.Title,
		arg.Description,
		arg.LongDescription,
		arg.SmallCoverUrl,
		arg.CoverUrl,
		arg.TitleUrl,
		arg.PosterUrl,
		arg.SeasonNumber,
		arg.EpisodeCount,
		arg.SeriesID,
	)
	var i Season
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Description,
		&i.LongDescription,
		&i.SmallCoverUrl,
		&i.CoverUrl,
		&i.TitleUrl,
		&i.PosterUrl,
		&i.SeasonNumber,
		&i.EpisodeCount,
		&i.SeriesID,
	)
	return i, err
}

const createSeries = `-- name: CreateSeries :one
INSERT INTO series (
    id,
    title,
    description,
    long_description,
    small_cover_url,
    cover_url,
    title_url,
    poster_url,
    logo_url
) VALUES (
    ?, ?, ?, ?, ?, ?, ?, ?, ?
)
RETURNING id, title, description, long_description, small_cover_url, cover_url, title_url, poster_url, logo_url
`

type CreateSeriesParams struct {
	ID              int64
	Title           string
	Description     sql.NullString
	LongDescription sql.NullString
	SmallCoverUrl   sql.NullString
	CoverUrl        sql.NullString
	TitleUrl        sql.NullString
	PosterUrl       sql.NullString
	LogoUrl         sql.NullString
}

func (q *Queries) CreateSeries(ctx context.Context, arg CreateSeriesParams) (Series, error) {
	row := q.db.QueryRowContext(ctx, createSeries,
		arg.ID,
		arg.Title,
		arg.Description,
		arg.LongDescription,
		arg.SmallCoverUrl,
		arg.CoverUrl,
		arg.TitleUrl,
		arg.PosterUrl,
		arg.LogoUrl,
	)
	var i Series
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Description,
		&i.LongDescription,
		&i.SmallCoverUrl,
		&i.CoverUrl,
		&i.TitleUrl,
		&i.PosterUrl,
		&i.LogoUrl,
	)
	return i, err
}

const createToken = `-- name: CreateToken :one
INSERT INTO tokens (
    id,
    value,
    expires_at
) VALUES (
    ?, ?, ?
)
RETURNING id, value, expires_at
`

type CreateTokenParams struct {
	ID        string
	Value     string
	ExpiresAt sql.NullInt64
}

func (q *Queries) CreateToken(ctx context.Context, arg CreateTokenParams) (Token, error) {
	row := q.db.QueryRowContext(ctx, createToken, arg.ID, arg.Value, arg.ExpiresAt)
	var i Token
	err := row.Scan(&i.ID, &i.Value, &i.ExpiresAt)
	return i, err
}

const deleteDownload = `-- name: DeleteDownload :exec
DELETE FROM downloads
WHERE episode_id = ?
`

func (q *Queries) DeleteDownload(ctx context.Context, episodeID sql.NullInt64) error {
	_, err := q.db.ExecContext(ctx, deleteDownload, episodeID)
	return err
}

const deleteEpisode = `-- name: DeleteEpisode :exec
DELETE FROM episodes
WHERE id = ?
`

func (q *Queries) DeleteEpisode(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteEpisode, id)
	return err
}

const deletePlaylist = `-- name: DeletePlaylist :exec
DELETE FROM playlists
WHERE id = ?
`

func (q *Queries) DeletePlaylist(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deletePlaylist, id)
	return err
}

const deleteSeason = `-- name: DeleteSeason :exec
DELETE FROM seasons
WHERE id = ?
`

func (q *Queries) DeleteSeason(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteSeason, id)
	return err
}

const deleteSeries = `-- name: DeleteSeries :exec
DELETE FROM series
WHERE id = ?
`

func (q *Queries) DeleteSeries(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteSeries, id)
	return err
}

const deleteToken = `-- name: DeleteToken :exec
DELETE FROM tokens
WHERE id = ?
`

func (q *Queries) DeleteToken(ctx context.Context, id string) error {
	_, err := q.db.ExecContext(ctx, deleteToken, id)
	return err
}

const getDownload = `-- name: GetDownload :one

SELECT episode_id, file_path, downloaded_at FROM downloads
WHERE episode_id = ? LIMIT 1
`

// - DOWNLOADS ---
func (q *Queries) GetDownload(ctx context.Context, episodeID sql.NullInt64) (Download, error) {
	row := q.db.QueryRowContext(ctx, getDownload, episodeID)
	var i Download
	err := row.Scan(&i.EpisodeID, &i.FilePath, &i.DownloadedAt)
	return i, err
}

const getEpisode = `-- name: GetEpisode :one

SELECT id, title, description, cover_url, thumbnail_url, poster_url, duration, external_asset_id, rating, descriptors, season_number, episode_number, season_id FROM episodes
WHERE id = ? LIMIT 1
`

// -- EPISODES ----
func (q *Queries) GetEpisode(ctx context.Context, id int64) (Episode, error) {
	row := q.db.QueryRowContext(ctx, getEpisode, id)
	var i Episode
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Description,
		&i.CoverUrl,
		&i.ThumbnailUrl,
		&i.PosterUrl,
		&i.Duration,
		&i.ExternalAssetID,
		&i.Rating,
		&i.Descriptors,
		&i.SeasonNumber,
		&i.EpisodeNumber,
		&i.SeasonID,
	)
	return i, err
}

const getEpisodesByPlaylist = `-- name: GetEpisodesByPlaylist :many
SELECT e.id, e.title, e.description, e.cover_url, e.thumbnail_url, e.poster_url, e.duration, e.external_asset_id, e.rating, e.descriptors, e.season_number, e.episode_number, e.season_id FROM episodes e
JOIN playlist_episodes pe ON e.id = pe.episode_id
WHERE pe.playlist_id = ?
ORDER BY e.id
`

func (q *Queries) GetEpisodesByPlaylist(ctx context.Context, playlistID sql.NullInt64) ([]Episode, error) {
	rows, err := q.db.QueryContext(ctx, getEpisodesByPlaylist, playlistID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Episode
	for rows.Next() {
		var i Episode
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Description,
			&i.CoverUrl,
			&i.ThumbnailUrl,
			&i.PosterUrl,
			&i.Duration,
			&i.ExternalAssetID,
			&i.Rating,
			&i.Descriptors,
			&i.SeasonNumber,
			&i.EpisodeNumber,
			&i.SeasonID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getEpisodesBySeason = `-- name: GetEpisodesBySeason :many
SELECT id, title, description, cover_url, thumbnail_url, poster_url, duration, external_asset_id, rating, descriptors, season_number, episode_number, season_id FROM episodes
WHERE season_id = ?
ORDER BY episode_number
`

func (q *Queries) GetEpisodesBySeason(ctx context.Context, seasonID sql.NullInt64) ([]Episode, error) {
	rows, err := q.db.QueryContext(ctx, getEpisodesBySeason, seasonID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Episode
	for rows.Next() {
		var i Episode
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Description,
			&i.CoverUrl,
			&i.ThumbnailUrl,
			&i.PosterUrl,
			&i.Duration,
			&i.ExternalAssetID,
			&i.Rating,
			&i.Descriptors,
			&i.SeasonNumber,
			&i.EpisodeNumber,
			&i.SeasonID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getEpisodesBySeries = `-- name: GetEpisodesBySeries :many
SELECT e.id, e.title, e.description, e.cover_url, e.thumbnail_url, e.poster_url, e.duration, e.external_asset_id, e.rating, e.descriptors, e.season_number, e.episode_number, e.season_id FROM episodes e
JOIN seasons s ON e.season_id = s.id
WHERE s.series_id = ?
ORDER BY s.season_number, e.episode_number
`

func (q *Queries) GetEpisodesBySeries(ctx context.Context, seriesID sql.NullInt64) ([]Episode, error) {
	rows, err := q.db.QueryContext(ctx, getEpisodesBySeries, seriesID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Episode
	for rows.Next() {
		var i Episode
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Description,
			&i.CoverUrl,
			&i.ThumbnailUrl,
			&i.PosterUrl,
			&i.Duration,
			&i.ExternalAssetID,
			&i.Rating,
			&i.Descriptors,
			&i.SeasonNumber,
			&i.EpisodeNumber,
			&i.SeasonID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getPlaylist = `-- name: GetPlaylist :one

SELECT id, title, description, small_cover_url, cover_url, playlist_type FROM playlists
WHERE id = ? LIMIT 1
`

// -- PLAYLIST ----
func (q *Queries) GetPlaylist(ctx context.Context, id int64) (Playlist, error) {
	row := q.db.QueryRowContext(ctx, getPlaylist, id)
	var i Playlist
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Description,
		&i.SmallCoverUrl,
		&i.CoverUrl,
		&i.PlaylistType,
	)
	return i, err
}

const getSeason = `-- name: GetSeason :one

SELECT id, title, description, long_description, small_cover_url, cover_url, title_url, poster_url, season_number, episode_count, series_id FROM seasons
WHERE id = ? LIMIT 1
`

// -- SEASONS ----
func (q *Queries) GetSeason(ctx context.Context, id int64) (Season, error) {
	row := q.db.QueryRowContext(ctx, getSeason, id)
	var i Season
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Description,
		&i.LongDescription,
		&i.SmallCoverUrl,
		&i.CoverUrl,
		&i.TitleUrl,
		&i.PosterUrl,
		&i.SeasonNumber,
		&i.EpisodeCount,
		&i.SeriesID,
	)
	return i, err
}

const getSeasonsBySeries = `-- name: GetSeasonsBySeries :many
SELECT id, title, description, long_description, small_cover_url, cover_url, title_url, poster_url, season_number, episode_count, series_id FROM seasons
WHERE series_id = ?
ORDER BY season_number
`

func (q *Queries) GetSeasonsBySeries(ctx context.Context, seriesID sql.NullInt64) ([]Season, error) {
	rows, err := q.db.QueryContext(ctx, getSeasonsBySeries, seriesID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Season
	for rows.Next() {
		var i Season
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Description,
			&i.LongDescription,
			&i.SmallCoverUrl,
			&i.CoverUrl,
			&i.TitleUrl,
			&i.PosterUrl,
			&i.SeasonNumber,
			&i.EpisodeCount,
			&i.SeriesID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getSeries = `-- name: GetSeries :one

SELECT id, title, description, long_description, small_cover_url, cover_url, title_url, poster_url, logo_url FROM series
WHERE id = ? LIMIT 1
`

// -- SERIES ----
func (q *Queries) GetSeries(ctx context.Context, id int64) (Series, error) {
	row := q.db.QueryRowContext(ctx, getSeries, id)
	var i Series
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Description,
		&i.LongDescription,
		&i.SmallCoverUrl,
		&i.CoverUrl,
		&i.TitleUrl,
		&i.PosterUrl,
		&i.LogoUrl,
	)
	return i, err
}

const getToken = `-- name: GetToken :one

SELECT id, value, expires_at FROM tokens
WHERE id = ? LIMIT 1
`

// -- TOKENS ----
func (q *Queries) GetToken(ctx context.Context, id string) (Token, error) {
	row := q.db.QueryRowContext(ctx, getToken, id)
	var i Token
	err := row.Scan(&i.ID, &i.Value, &i.ExpiresAt)
	return i, err
}

const listDownloads = `-- name: ListDownloads :many
SELECT episode_id, file_path, downloaded_at FROM downloads
ORDER BY episode_id
`

func (q *Queries) ListDownloads(ctx context.Context) ([]Download, error) {
	rows, err := q.db.QueryContext(ctx, listDownloads)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Download
	for rows.Next() {
		var i Download
		if err := rows.Scan(&i.EpisodeID, &i.FilePath, &i.DownloadedAt); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listEpisodes = `-- name: ListEpisodes :many
SELECT id, title, description, cover_url, thumbnail_url, poster_url, duration, external_asset_id, rating, descriptors, season_number, episode_number, season_id FROM episodes
ORDER BY title
`

func (q *Queries) ListEpisodes(ctx context.Context) ([]Episode, error) {
	rows, err := q.db.QueryContext(ctx, listEpisodes)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Episode
	for rows.Next() {
		var i Episode
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Description,
			&i.CoverUrl,
			&i.ThumbnailUrl,
			&i.PosterUrl,
			&i.Duration,
			&i.ExternalAssetID,
			&i.Rating,
			&i.Descriptors,
			&i.SeasonNumber,
			&i.EpisodeNumber,
			&i.SeasonID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listPlaylists = `-- name: ListPlaylists :many
SELECT id, title, description, small_cover_url, cover_url, playlist_type FROM playlists
ORDER BY title
`

func (q *Queries) ListPlaylists(ctx context.Context) ([]Playlist, error) {
	rows, err := q.db.QueryContext(ctx, listPlaylists)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Playlist
	for rows.Next() {
		var i Playlist
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Description,
			&i.SmallCoverUrl,
			&i.CoverUrl,
			&i.PlaylistType,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listSeasons = `-- name: ListSeasons :many
SELECT id, title, description, long_description, small_cover_url, cover_url, title_url, poster_url, season_number, episode_count, series_id FROM seasons
ORDER BY title
`

func (q *Queries) ListSeasons(ctx context.Context) ([]Season, error) {
	rows, err := q.db.QueryContext(ctx, listSeasons)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Season
	for rows.Next() {
		var i Season
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Description,
			&i.LongDescription,
			&i.SmallCoverUrl,
			&i.CoverUrl,
			&i.TitleUrl,
			&i.PosterUrl,
			&i.SeasonNumber,
			&i.EpisodeCount,
			&i.SeriesID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listSeries = `-- name: ListSeries :many
SELECT id, title, description, long_description, small_cover_url, cover_url, title_url, poster_url, logo_url FROM series
ORDER BY title
`

func (q *Queries) ListSeries(ctx context.Context) ([]Series, error) {
	rows, err := q.db.QueryContext(ctx, listSeries)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Series
	for rows.Next() {
		var i Series
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Description,
			&i.LongDescription,
			&i.SmallCoverUrl,
			&i.CoverUrl,
			&i.TitleUrl,
			&i.PosterUrl,
			&i.LogoUrl,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listTokens = `-- name: ListTokens :many
SELECT id, value, expires_at FROM tokens
ORDER BY id
`

func (q *Queries) ListTokens(ctx context.Context) ([]Token, error) {
	rows, err := q.db.QueryContext(ctx, listTokens)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Token
	for rows.Next() {
		var i Token
		if err := rows.Scan(&i.ID, &i.Value, &i.ExpiresAt); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateToken = `-- name: UpdateToken :exec
UPDATE tokens
set value = ?, expires_at = ?
WHERE id = ?
`

type UpdateTokenParams struct {
	Value     string
	ExpiresAt sql.NullInt64
	ID        string
}

func (q *Queries) UpdateToken(ctx context.Context, arg UpdateTokenParams) error {
	_, err := q.db.ExecContext(ctx, updateToken, arg.Value, arg.ExpiresAt, arg.ID)
	return err
}
